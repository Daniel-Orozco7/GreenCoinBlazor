 @page "/formulario-alimentos"
@using GreenCoinHealth.Shared.Models;
@inject IJSRuntime JS
@inject HttpClient httpClient
@inject HttpClient Http
@inject NavigationManager NavigationManager

<h3>Formulario de Alimentos</h3>

@if (alimento == null)
{
    <p><em>Cargando...</em></p>
}
else
{
    <EditForm Model="alimento" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="nombre">Nombre:</label>
            <InputText id="nombre" class="form-control" @bind-Value="alimento.Nombre" />
        </div>
        <div class="form-group">
            <label for="descripcion">Descripcion:</label>
            <InputTextArea id="descripcion" class="form-control" @bind-Value="alimento.Descripcion" />
        </div>
        <div class="form-group">
            <label for="tipo">tipo (g):</label>
            <InputText id="tipo" class="form-control" @bind-Value="alimento.Tipo" />
        </div>
        <div class="form-group">
            <label for="precio">Precio (g):</label>
            <InputNumber id="precio" class="form-control" @bind-Value="alimento.Precio" />
        </div>
        <div class="form-group">
            <label for="organico">Es organico (g):</label>
            <InputCheckbox id="organico" class="form-control" @bind-Value="alimento.EsOrganico" />
        </div>
        <div class="form-group">
            <label for="origen">Origen (g):</label>
            <InputText id="origen" class="form-control" @bind-Value="alimento.Origen" />
        </div>
        

        <button type="submit" class="btn btn-success">Guardar</button>
    </EditForm>
}

@code {
     public Alimentos alimento;

    protected override async Task OnInitializedAsync()
    {
        alimento = new Alimentos(); // Este sería un nuevo alimento. Para editar, necesitarías cargar un alimento existente aquí.
    }

    private async Task HandleValidSubmit()
    {
        await JS.InvokeVoidAsync("console.log", alimento);
        // var saveResponse = await httpClient.PostAsJsonAsync<Alimentos>("/api/alimentos/", alimento);
        // var registerResponse = await saveResponse.Content.ReadFromJsonAsync<Alimentos>();
        
        // await JS.InvokeVoidAsync("console.log", saveResponse);
        // await JS.InvokeVoidAsync("console.log", registerResponse);
        if (alimento.Id == 0)
        {
            await Http.PostAsJsonAsync("api/alimentos", alimento);
        }
        else
        {
            await Http.PutAsJsonAsync($"api/alimentos/{alimento.Id}", alimento);
        }
        await JS.InvokeVoidAsync("alert", "alimento creado con exito");
    }
}
 