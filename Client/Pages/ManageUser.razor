@page "/manageuser"

@inject HttpClient httpClient
@using GreenCoinHealth.Shared
@using GreenCoinHealth.Client.Extensions
@inject IJSRuntime JS
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.Authorization;
@inject NavigationManager navManager
@attribute [Authorize]

<AuthorizeView>
    <Authorized Context="authContext">
        <link href="css/table.css" rel="stylesheet">
        <h1>Usuarios Registrados</h1>

        @if (userList == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <table id="customers">
                <thead >
                    <tr>
                        <th>Tipo de documento</th>
                        <th>Documento</th>
                        <th>Nombre</th>
                        <th>Apellido</th>
                        <th>Nombre de Usuario</th>
                        <th>Género</th>
                        <th>Teléfono</th>
                        <th>Correo</th>
                        <th>Rol</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var user in userList)
                    {
                        <tr>
                            <td>@(user.TypeDni == "CC" ? "Cédula de Ciudadania" : (user.TypeDni == "TI" ? "Tarjeta de Identidad" : (user.TypeDni == "CE" ? "Cédula de Estrajeria" : "Pasaporte")))</td>
                            <td>@user.Dni</td>
                            <td>@user.Name</td>
                            <td>@user.LastName</td>
                            <td>@user.username</td>
                            <td>@(user.Gender == "1" ? "Masculino" : (user.Gender == "2" ? "Femenino" : "Otro"))</td>
                            <td>@user.Phone</td>
                            <td>@user.Email</td>
                            <td>@(user.UserRole == "1" ? "Administrador" : (user.UserRole == "2" ? "Usuario" : "Nutricionista"))</td>
                            <td>
                                <button class="btn btn-outline-success" @onclick="() => EditUser(user.Dni)">
                                    Editar
                                </button>

                                <button class="btn btn-outline-danger" @onclick="() => DeleteUser(user.Dni)">
                                    Eliminar
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            @if (ShowPopup)
            {
                <!-- This is the popup to create or edit a user -->
                <div class="modal" tabindex="-1" style="display:block" role="dialog">
                    <div class="modal-dialog modal-lg">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h3 class="modal-title">Información</h3>
                                <!-- Button to close the popup -->
                                <button type="button" class="close"
                                        @onclick="ClosePopup">
                                    <span aria-hidden="true">X</span>
                                </button>
                            </div>
                            <!-- Edit form for the current user -->
                            <div class="modal-body">
                                <EditForm OnValidSubmit="SaveUser" Model="@objUser">
                                    <DataAnnotationsValidator />
                                @if (!isEdit)
                                {
                                    <div class="form-group row mb-1">
                                        <label class="col-sm-3 col-form-label" for="ddlDniType">Tipo de documento:</label>
                                        <div class="col-sm-9">
                                            <InputSelect class="form-control" id="ddlDniType" @bind-Value="@objUser.TypeDni">
                                                @foreach (var usrDocType in Enum.GetValues(typeof(AppEnums.UserDocType)))
                                                {
                                                    <option value="@usrDocType">@usrDocType</option>
                                                }
                                            </InputSelect>
                                            <ValidationMessage For="@(() => objUser.TypeDni)" />
                                        </div>
                                    </div>
                                    <div class="form-group row mb-1">
                                        <label class="col-sm-3 col-form-label" for="usrDni">Documento</label>
                                        <div class="col-sm-9">
                                            <InputText Class="form-control" id="usrDni" @bind-Value="@objUser.Dni" />
                                            <ValidationMessage For="@(() => objUser.Dni)" />
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <div class="form-group row mb-1">
                                        <label class="col-sm-3 col-form-label" for="ddlDniType">Tipo de documento:</label>
                                        <div class="col-sm-9">
                                            <InputText Class="form-control" disabled="disabled" id="ddlDniType" @bind-Value="@objUser.TypeDni" />
                                        </div>
                                    </div>
                                    <div class="form-group row mb-1">
                                        <label class="col-sm-3 col-form-label" for="usrDni">Documento</label>
                                        <div class="col-sm-9">
                                            <InputText Class="form-control" disabled="disabled" id="usrDni" @bind-Value="@objUser.Dni" />
                                        </div>
                                    </div>
                                }
                                    <div class="form-group row mb-1">
                                        <label class="col-sm-3 col-form-label" for="ddlGender">Género</label>
                                        <div class="col-sm-9">
                                            <InputSelect class="form-control" id="ddlGender" @bind-Value="@objUser.Gender">
                                                @foreach (var usrGender in Enum.GetValues(typeof(AppEnums.UserGender)))
                                                {
                                                    <option value="@usrGender">@usrGender</option>
                                                }
                                            </InputSelect>
                                            <ValidationMessage For="@(() => objUser.Gender)" />
                                        </div>
                                    </div>
                                    <div class="form-group row mb-1">
                                        <label class="col-sm-3 col-form-label" for="fName">Nombre</label>
                                        <div class="col-sm-9">
                                            <InputText Class="form-control" id="fName" @bind-Value="@objUser.Name" />
                                            <ValidationMessage For="@(() => objUser.Name)" />
                                        </div>
                                    </div>
                                    <div class="form-group row mb-1">
                                        <label class="col-sm-3 col-form-label" for="usrLastName">Apellido</label>
                                        <div class="col-sm-9">
                                            <InputText Class="form-control" id="usrLastName" @bind-Value="@objUser.LastName" />
                                            <ValidationMessage For="@(() => objUser.LastName)" />
                                        </div>
                                    </div>
                                    <div class="form-group row mb-1">
                                        <label class="col-sm-3 col-form-label" for="usrName">Nombre Usuario</label>
                                        <div class="col-sm-9">
                                            <InputText Class="form-control" id="usrName" @bind-Value="@objUser.username" />
                                            <ValidationMessage For="@(() => objUser.username)" />
                                        </div>
                                    </div>
                                    <div class="form-group row mb-1">
                                        <label class="col-sm-3 col-form-label" for="usrEmail">Correo</label>
                                        <div class="col-sm-9">
                                            <InputText Class="form-control" id="usrEmail" @bind-Value="@objUser.Email" />
                                            <ValidationMessage For="@(() => objUser.Email)" />
                                        </div>
                                    </div>
                                    <div class="form-group row mb-1">
                                        <label class="col-sm-3 col-form-label" for="usrPhone">Teléfono</label>
                                        <div class="col-sm-9">
                                            <InputText Class="form-control" id="usrPhone" @bind-Value="@objUser.Phone" />
                                            <ValidationMessage For="@(() => objUser.Phone)" />
                                        </div>
                                    </div>
                                    <div class="form-group row mb-1">
                                        <label class="col-sm-3 col-form-label" for="ddlRole">Rol</label>
                                        <div class="col-sm-9">
                                            <InputSelect class="form-control" id="ddlRole" @bind-Value="@objUser.UserRole">
                                                @foreach (var usrRole in Enum.GetValues(typeof(AppEnums.UserRole)))
                                                {
                                                    <option value="@usrRole">@usrRole</option>
                                                }
                                            </InputSelect>
                                            <ValidationMessage For="@(() => objUser.UserRole)" />
                                        </div>
                                    </div>
                                    @if (!isEdit)
                                    {
                                        <div class="form-group row mb-1">
                                            <label class="col-sm-3 col-form-label" for="pwd">Contraseña</label>
                                            <div class="col-sm-9">
                                                @if (showPasswords)
                                                {
                                                    <InputText Class="form-control" id="pwd" @bind-Value="@objUser.Password" />
                                                }
                                                else
                                                {
                                                    <InputText type="password" Class="form-control" id="pwd" @bind-Value="@objUser.Password" />
                                                }
                                                <ValidationMessage For="@(() => objUser.Password)" />
                                            </div>
                                        </div>
                                        <div class="form-group row mb-1">
                                            <label class="col-sm-3 col-form-label" for="pwdConfirm">Confirme Contraseña</label>
                                            <div class="col-sm-9">
                                                @if (showPasswords)
                                                {
                                                    <InputText Class="form-control" id="pwdConfirm" @bind-Value="@objUser.Confirm_Password" />
                                                }
                                                else
                                                {
                                                    <InputText type="password" Class="form-control" id="pwdConfirm" @bind-Value="@objUser.Confirm_Password" />
                                                }
                                                <ValidationMessage For="@(() => objUser.Confirm_Password)" />
                                            </div>
                                        </div>
                                        <div class="form-group row mb-1">
                                            <label class="col-sm-3 col-form-label">Mostrar Contraseñas</label>
                                            <div class="col-sm-9">
                                                <InputCheckbox @bind-Value="showPasswords">Mostrar contraseñas</InputCheckbox>
                                            </div>
                                        </div>
                                    }
                                    <br />
                                    <br />
                                    <div>
                                        <span style="color:#28a745">@strSuccess</span>
                                        <span style="color:#dc3545">@strError</span>
                                    </div>
                                    <br />
                                    <div class="row flex-xl-nowrap">
                                    @if (!isEdit)
                                    {
                                        <button class="btn btn btn-primary btn-lg btn-block" type="submit">Guardar</button>
                                    }
                                    else
                                    {
                                        <button class="btn btn-primary" @onclick="SaveEditUser">Añadir Usuario</button>
                                    }
                                    </div>
                                </EditForm>
                            </div>
                        </div>
                    </div>
                </div>
            }
            <button class="btn btn-outline-primary" @onclick="AddNewUser">Añadir Usuario</button>

        }
    </Authorized>
</AuthorizeView>



@code {

    // Property used to add or edit the currently selected user
    UserDTO objUser = new UserDTO();
    // Collection to display the existing users
    protected List<UserDTO> userList; 
    // To hold any possible errors
    string strError = "";
    // To hold the registration success
    string strSuccess = "";
    // To enable showing the Popup
    bool ShowPopup = false;
    private bool isEdit = false;
    private bool canSendData;

    protected override async Task OnInitializedAsync()
    {
        userList = await GetUsers();
    }



    public async Task<List<UserDTO>> GetUsers()
    {
        await JS.InvokeVoidAsync("console.log", "5");
        return await httpClient.GetFromJsonAsync<List<UserDTO>>("/api/User/ReadUsers");

    }

    void AddNewUser()
    {
        // Make new user
        objUser = new UserDTO();
        // Set Id to blank so we know it is a new record
        objUser.Dni = "";
        //Clear messages
        strSuccess = "";
        strError = "";
        // Open the Popup
        ShowPopup = true;
    }

    async Task SaveUser()
    {
        strSuccess = "";
        strError = "";
        await JS.InvokeVoidAsync("console.log", "1");
        if (objUser.Gender == "Masculino")
        {
            objUser.Gender = "1";
        }
        if (objUser.Gender == "Femenimo")
        {
            objUser.Gender = "2";
        }
        if (objUser.Gender == "Otro")
        {
            objUser.Gender = "3";
        }
        objUser.Gender = ((int)(AppEnums.UserGender)Enum.Parse(typeof(AppEnums.UserGender), objUser.Gender)).ToString();
        objUser.UserRole = ((int)(AppEnums.UserRole)Enum.Parse(typeof(AppEnums.UserRole), objUser.UserRole)).ToString();

        var saveResponse = await httpClient.PostAsJsonAsync<UserDTO>("/api/User/RegisterUser", objUser);
        var registerResponse = await saveResponse.Content.ReadFromJsonAsync<ResultDTO>();

        if (saveResponse.IsSuccessStatusCode)
        {
            strSuccess = registerResponse.Mensaje;
            userList = await GetUsers();
        }
        else
        {

            strError = registerResponse.Mensaje;
        }
    }


    async Task SaveEditUser()
    {
        await JS.InvokeVoidAsync("console.log", "2");

        if (objUser.Gender == "Masculino")
        {
            objUser.Gender = "1";
        }
        if (objUser.Gender == "Femenimo")
        {
            objUser.Gender = "2";
        }
        if (objUser.Gender == "Otro")
        {
            objUser.Gender = "3";
        }
        UserDTO UserB = await httpClient.GetFromJsonAsync<UserDTO>($"/api/User/GetUser/{objUser.Dni}");
        // objUser.Password = UserB.Password;
        await JS.InvokeVoidAsync("console.log", UserB);
        await JS.InvokeVoidAsync("console.log", objUser);
        var saveResponse = await httpClient.PutAsJsonAsync<UserDTO>("/api/User/UpdateUser", objUser);
        var registerResponse = await saveResponse.Content.ReadFromJsonAsync<ResultDTO>();

        if (saveResponse.IsSuccessStatusCode)
        {
            strSuccess = registerResponse.Mensaje;
            userList = await GetUsers();
        }
        else
        {

            strError = registerResponse.Mensaje;
        }

        isEdit = false;
        ShowPopup = false;
        await JS.InvokeVoidAsync("location.reload");
    }


    async Task EditUser(string userDni)
    {
        await JS.InvokeVoidAsync("console.log", "3");
        if (objUser.Gender == "Masculino")
        {
            objUser.Gender = "1";
        }
        if (objUser.Gender == "Femenimo")
        {
            objUser.Gender = "2";
        }
        if (objUser.Gender == "Otro")
        {
            objUser.Gender = "3";
        }
        //Clear messages
        strSuccess = "";
        strError = "";

        objUser = await httpClient.GetFromJsonAsync<UserDTO>($"/api/User/GetUser/{userDni}");

        objUser.Gender = Enum.GetName(typeof(AppEnums.UserGender), Convert.ToInt32(objUser.Gender));
        objUser.UserRole = Enum.GetName(typeof(AppEnums.UserRole), Convert.ToInt32(objUser.UserRole));

        // Open the Popup
        ShowPopup = true;
        isEdit = true;


    }
    async Task DeleteUser(string userDni)
    {
        // Enviar solicitud de eliminación al endpoint del servidor
        var response = await httpClient.DeleteAsync($"/api/User/DeleteUser/{userDni}");

        if (response.IsSuccessStatusCode)
        {
            // Si la eliminación fue exitosa, actualiza la lista de usuarios en el cliente.
            userList = userList.Where(u => u.Dni != userDni).ToList();
            strSuccess = "Usuario eliminado correctamente.";
        }
        else
        {
            // Si hubo un error, lee el mensaje del servidor.
            var errorResult = await response.Content.ReadFromJsonAsync<ResultDTO>();
            strError = errorResult?.Mensaje ?? "Error desconocido al eliminar el usuario.";
        }

        StateHasChanged(); // Notifica a Blazor que la UI debe actualizarse
    }
    void ClosePopup()
    {
        // Close the Popup
        ShowPopup = false;
        isEdit = false;
    }

    private async void Submit(EditContext editContext)
    {
        await JS.InvokeVoidAsync("console.log", "4");
        var pwdFieldIdentifier = editContext.Field("Password");
        var pdwConfirmFieldIdentifier = editContext.Field("Confirm_Password");

        var validationMessagesCount = editContext.GetValidationMessages().Count();
        if (validationMessagesCount == 0)
        {// every field is valid
            canSendData = true;
            StateHasChanged();
        }
        else if (editContext.GetValidationMessages(pwdFieldIdentifier).Count() > 0)
        {// every field is valid except the field for the `Name` property, but we dont care about it
            canSendData = true;
            StateHasChanged();
        }
        else if (editContext.GetValidationMessages(pdwConfirmFieldIdentifier).Count() > 0)
        {// every field is valid except the field for the `Name` property, but we dont care about it
            canSendData = true;
            StateHasChanged();
        }
        else
        {// there is/are some invalid field/s that we care about
            canSendData = false;
            StateHasChanged();
        }

        if (canSendData)
            await SaveUser();

    }
    bool showPasswords = false;

    private void ToggleShowPasswords()
    {
        showPasswords = !showPasswords;
    }

}

