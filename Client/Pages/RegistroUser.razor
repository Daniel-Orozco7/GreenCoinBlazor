@page "/register"

@inject HttpClient httpClient
@using GreenCoinHealth.Shared
@using Microsoft.AspNetCore.Components.Forms
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject NavigationManager NavigationManager

<script src="js/passwordToggle.js"></script>
<link href="css/register.css" rel="stylesheet">
<div class="registration-container">
<h1>Registro</h1>

@if (strSuccess != "")
{
    <div class="alert alert-success" role="alert">
        @strSuccess
    </div>
}

@* @if (strError != "")
{
    <div class="alert alert-danger" role="alert">
        @strError
    </div>
} *@

<EditForm Model="@objUser" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="ddlDniType">Tipo de documento:</label>
        <InputSelect class="form-control" id="ddlDniType" @bind-Value="@objUser.TypeDni">
            @foreach (var docType in Enum.GetValues(typeof(AppEnums.UserDocType)))
            {
                <option value="@docType">@docType</option>
            }
        </InputSelect>
        <ValidationMessage For="@(()=>objUser.TypeDni)"/>
    </div>

    <div class="form-group">
        <label for="usrDni">Número de Identificación:</label>
        <InputText class="form-control" id="usrDni" @bind-Value="@objUser.Dni" />
            <ValidationMessage For="@(()=>objUser.Dni)" />
    </div>
    
    <div class="form-group">
        <label for="ddlGender">Género:</label>
        <InputSelect class="form-control" id="ddlGender" @bind-Value="@objUser.Gender" required>
            <option value="">Seleccione un género...</option>
            @foreach (var gender in Enum.GetValues(typeof(AppEnums.UserGender)))
            {
                <option value="@gender">@gender</option>
            }
        </InputSelect>
            <ValidationMessage For="@(()=>objUser.Gender)" />
    </div>

    <div class="form-group">
        <label for="fName">Nombres:</label>
        <InputText class="form-control" id="fName" @bind-Value="@objUser.Name" />
            <ValidationMessage For="@(()=>objUser.Name)" />
    </div>

    <div class="form-group">
        <label for="usrLastName">Apellidos:</label>
        <InputText class="form-control" id="usrLastName" @bind-Value="@objUser.LastName" />
        <ValidationMessage For="@(()=>objUser.LastName)" />
    </div>

    <div class="form-group">
        <label for="usrUsername">Nombre de Usuario:</label>
        <InputText class="form-control" id="usrUsername" @bind-Value="@objUser.username" />
        <ValidationMessage For="@(()=>objUser.username)" />
    </div>

    <div class="form-group">
        <label for="usrPhone">Teléfono:</label>
        <InputText class="form-control" id="usrPhone" @bind-Value="@objUser.Phone" />
        <ValidationMessage For="@(()=>objUser.Phone)" />
    </div>

    <div class="form-group">
        <label for="usrEmail">Correo Electronico:</label>
        <InputText class="form-control" id="usrEmail" @bind-Value="@objUser.Email" />
        <ValidationMessage For="@(()=>objUser.Email)" />
    </div>
    <div class="form-group">
        <label for="pwd">Contraseña:</label>
        <div class="input-group">
            <InputText type="password" class="form-control" id="pwd" @bind-Value="@objUser.Password" />
                <div class="input-group-append">
                    <button class="btn btn-outline-secondary" type="button" onclick="togglePassword('pwd')">Mostrar</button>
                </div>
        </div>
            <ValidationMessage For="@(()=>objUser.Password)" />
    </div>

    <div class="form-group">
        <label for="pwdConfirm">Confirmar Contraseña:</label>
        <div class="input-group">
            <InputText type="password" class="form-control" id="pwdConfirm" @bind-Value="@objUser.Confirm_Password" />
                <div class="input-group-append">
                    <button class="btn btn-outline-secondary" type="button" onclick="togglePassword('pwdConfirm')">Mostrar</button>
                </div>
        </div>
            <ValidationMessage For="@(()=>objUser.Confirm_Password)" />
    </div>


    <button type="submit" class="btn btn-primary">Registrarse</button>
</EditForm>
</div>

@code {
    UserDTO objUser = new UserDTO() { UserRole = "2" }; // El rol es siempre "2"
    string strError = "";
    string strSuccess = "";

    private async Task HandleValidSubmit()
    {
        try
        {
            // Mapear el género seleccionado a un valor numérico (opcional)
            switch (objUser.Gender)
            {
                case "Masculino":
                    objUser.Gender = "1";
                    break;
                case "Femenino":
                    objUser.Gender = "2";
                    break;
                case "Otro":
                    objUser.Gender = "3";
                    break;
            }

            var response = await httpClient.PostAsJsonAsync("/api/User/RegisterUser/", objUser);
            await JS.InvokeVoidAsync("console.log", objUser);

            if (response.IsSuccessStatusCode)
            {
                strSuccess = "Usuario registrado exitosamente.";
                NavigationManager.NavigateTo("/UserCreated");
            }
            else
            {
                strError = "Error al registrar usuario.";
            }
        }
        catch (Exception e)
        {
            await JS.InvokeVoidAsync("console.log", e);
        }
    }
}
@code {

    private async Task ShowPassword(string fieldId)
    {
        await JS.InvokeVoidAsync("showPassword", fieldId);
    }
}
