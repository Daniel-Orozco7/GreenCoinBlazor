@page "/login-token"
@using GreenCoinHealth.Client.Extensions
@using GreenCoinHealth.Shared
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject HttpClient Http
@inject NavigationManager navManager
@inject AuthenticationStateProvider autenticacionProvider

<h3>Enter Token</h3>

<EditForm Model="@this" OnValidSubmit="ValidateToken">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="token">Token</label>
        <InputText @bind-Value="token" id="token" placeholder="Enter your token" class="form-control" />
    </div>

    <button type="submit" class="btn btn-primary">Validate Token</button>
</EditForm>

<p>@message</p>

@code {
    private string token;
    private string message;

    private async Task ValidateToken()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("/api/User/validate-token", token);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<TokenValidationResponse>();

                if (result != null)
                {
                    message = $"Token is valid. Email: {result.Email}, Role: {result.Role}";

                    // Redirigir al usuario basado en su rol
                    await RedirigirSegunRol(result.Role);
                }
                else
                {
                    message = "Invalid token response";
                }
            }
            else
            {
                message = $"Error: {response.StatusCode} - {response.ReasonPhrase}";
            }
        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
        }
    }

    private async Task RedirigirSegunRol(string role)
    {
        if (!string.IsNullOrWhiteSpace(role))
        {
            if (role == "Nutricionista")
            {
                navManager.NavigateTo("/nutricionista");
            }
            else if (role == "Usuario")
            {
                navManager.NavigateTo("/usuario");
            }
            else if (role == "Administrador")
            {
                navManager.NavigateTo("/ManageUser");
            }
            else
            {
                navManager.NavigateTo("/"); // Redirigir a la página de inicio por defecto
            }
        }
        else
        {
            navManager.NavigateTo("/"); // Redirigir a la página de inicio por defecto si no se encuentra un rol
        }
    }

    public class TokenValidationResponse
    {
        public string Email { get; set; }
        public string Role { get; set; }
    }
}
